# Builds the docker-machine-driver-kamatera and releases it, if the build is a tag
# (due to the deploy.on.tags=true below).
#
# To make it work, create and encrypt an OAuth token for the Github API as follows:
# (1) Go to https://github.com/settings/tokens and create a new private token
#     with scope "public_repo".
# (2) Convert the token into a Travis secret as described at
#     https://docs.travis-ci.com/user/encryption-keys/:
#     * (assuming you are on a shell with the current working directory being
#       inside a local working copy of your Github project)
#     * gem install travis
#     * travis encypt <the token created in step (1)>
#     * add the secure: "<encrypted token>" to the travis.yml file as a key
#       below the api_key
language: go

sudo: required

go:
  - stable

env:
  global:
  - TRAVIS_CI_OPERATOR=1
  - secure: "TT2u22DqivTmPQwWSc1oDR+MPzz2UfylvMZTD3zid8TON+8s//n6PjxJLUBA+YGUbvXUYWEBbqO/GIiX6SglgsPz8QzH2plTSL1AOmABdRK47NNtjaMlmOPFGx20mtwYRipN08DhrSlSO8FvjEjaGEyKzeSRAabtIgJMEb94oFrkK1eOOxCBSt7QF2HFpEdJGncwFMQtFytjZG16aU1o9n/jVec25VoI/VtmmQ8owzibTUVJN0GPO44bSLXmntb0Qylic7fLmXEVDlxcE2N7dHd4tZTIHubAT/iNcJyY5JDjvlv9squsfllh3SOtueJiSkZarJd8/Jf9fHtG09EDVEP2iqqMr2ThZaUDEJxJXrKKrKqHW+CSZGv0e2fYtNcD5F3YFfBbzEoiO2qPqIxdJnxOVZ/Xyre3210eGQhnwTt0bEd3WhBD2o9fZKStqPZhSDLUsKbl/LPj1d/FdnnYabpbmbmthV1X74QPRVwDfahr1BpI6+qLVWCXeMmWWcqoFDPaAXDDkSFPL2FsA13OxItUKkw3hBK1toXhW4Y3yVZnm0z8rNpVoMXXD5WmcZpI0xfSco+a560cvVfcL4Wrd4bWzzID/I3U+pJkF5S2auFdy/u4klK0PsALH3PhJIJGFZed8AEOScM0cplyYU4I/29VP6xIfr0qPOlCMf7c01U="
  - secure: "yn7xw04Za9RFJSjRO4GNJJeVpVepnBFBTBk8iTn1jVDZCWb5RHEQUvOhsv1LY7D5NVODR94CGo8g49ZfWsJUujfStbkKzPc9R1DN8b4dmVuUKqjSHplu0MkGV74xlidyBFWQye7G7FI+WrUbo7/UUdQ+0IJyP4EO5LihPNDtI6zvh6oP2OF+cdXz/LsZBgn03k0Qn6amA2k3R7AoT85MuYSFcJ8r5307LbPZhaJVbeK36XkzGqBbg1v6KjVfoBPc2Qa6nGnMGykr1Zued4B52ZQGc7jFVKsJGPbFJXhVX4n5Uk8gnN8PS52zMp1loSS+5wC2My4Tt4A2JjLDUXQ7xYj2d+sPythwVS1EnxE326UhwvdO3VL0r8LEx5Noi9z2ztg7M/xTU4E/gBRY/QvE96Vsd8A0XBaUwJjxjCLTLsBm9MmS23RrqJQMIU7f0RExAGIjV9/PLX7pRxEHsPwJj25u++VH/t4QqdBLHY6ttI5MmUmBJqpnXCbTFVkGGjg0koyy3F4prDbdqY2Xh+ABIpqgCL1Ti/DJAfPXIU9jYuLB7imjw4CwslZQVy9yzy87EwDHrrYUVUH+wkT5PkCDPpWxlBzzJQo8NWQ39MWzdGLSHABbue2veEPdXnb712hgOCSH03pV49j/eZlQyorJSRBN9DvJIef42Dwp3pqZ15k="
  - ARTIFACTS_PATHS="./test_results/:./tests/"
  matrix:
#  - TEST_ACCOUNT=PRICELIMIT
  - TEST_ACCOUNT=NOLIMIT
#  - TEST_ACCOUNT=FREQLIMIT

services:
  - docker

addons:
  artifacts: true
  paths:
  - ./test_results/
  - ./tests/

before_install:
  # Install Go Dep
  - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

install:
  - dep ensure
  - go build -o docker-machine-driver-kamatera
  - chmod +x docker-machine-driver-kamatera
  - sudo cp docker-machine-driver-kamatera /usr/local/bin/docker-machine-driver-kamatera
  - curl -L https://github.com/docker/machine/releases/download/v0.16.0/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine
  - sudo install /tmp/docker-machine /usr/local/bin/docker-machine
  - curl -L https://raw.githubusercontent.com/OriHoch/travis-ci-operator/master/travis_ci_operator.sh > $HOME/bin/travis_ci_operator.sh
  - bash $HOME/bin/travis_ci_operator.sh init
  - travis_ci_operator.sh docker-login
  - curl -sL https://raw.githubusercontent.com/travis-ci/artifacts/master/install | bash

script:
  - cp -f `which docker-machine-driver-kamatera` tests/docker-machine-driver-kamatera
  - |
    ( docker pull kamatera/kamatera-docker-machine-driver-tests || true ) &&\
    docker build --cache-from kamatera/kamatera-docker-machine-driver-tests -t tests tests/
  # export KAMATERA_API_CLIENT_ID="$(eval echo \$KAMATERA_${TEST_ACCOUNT}_CLIENT_ID)"; \
  # export KAMATERA_API_SECRET="$(eval echo \$KAMATERA_${TEST_ACCOUNT}_SECRET)"; \
  - |
    export KAMATERA_API_CLIENT_ID="${TEST_API_CLIENT_ID}"; \
    export KAMATERA_API_SECRET="${TEST_API_SECRET}"; \
    docker run -t \
               -v /var/run/docker.sock:/var/run/docker.sock \
               -v "`pwd`/test_results/kamatera-suite-1/:/test_results/" \
               -e KAMATERA_API_CLIENT_ID -e KAMATERA_API_SECRET \
               -e "KAMATERA_HOST_PATH=`pwd`/test_results/kamatera-suite-1" \
               -e SUITE_RUN_TITLE=kamatera-suite-1 \
               -e NUM_SINGLE_MACHINE_TESTS_TO_RUN=5 \
               -e TEST_ACCOUNT \
               tests tests_suite.py
  - sudo chown -R $USER test_results/ tests/
  - docker tag tests kamatera/kamatera-docker-machine-driver-tests
  - docker push kamatera/kamatera-docker-machine-driver-tests
  # export KAMATERA_API_CLIENT_ID="$(eval echo \$KAMATERA_${TEST_ACCOUNT}_CLIENT_ID)"; \
  # export KAMATERA_API_SECRET="$(eval echo \$KAMATERA_${TEST_ACCOUNT}_SECRET)"; \
  - |
    export KAMATERA_API_CLIENT_ID="${TEST_API_CLIENT_ID}"; \
    export KAMATERA_API_SECRET="${TEST_API_SECRET}"; \
    docker run -t -e KAMATERA_API_CLIENT_ID -e KAMATERA_API_SECRET tests cleanup.py "ktm-"

after_failure:
  - artifacts upload test_results/ tests/

before_deploy:
  # Create binaries for many OSs and architures as tarballs.
  # the -osarch="!a/b !c/d" option is used to exclude OS-arch pairs
  # a/b and c/d from the build. OS-arch pairs might e.g. be excluded
  # they failed to build.
  - go get github.com/mitchellh/gox
  - mkdir releases
  - gox -osarch='!netbsd/arm !openbsd/386 !openbsd/amd64 !netbsd/386 !netbsd/amd64' -output="releases/{{.Dir}}_`git describe --tags --abbrev=0`_{{.OS}}_{{.Arch}}/{{.Dir}}" -ldflags "-X main.Version=`git describe --tags --abbrev=0`"
  # Loop through the built architecture directories and create their corresponding tar.gz archives with the binary in it.
  - find releases -maxdepth 2 -mindepth 2 -type f -exec bash -c 'tar -cvzf "$(dirname {}).tar.gz" -C "$(dirname {})" $(basename {})' \;

deploy:
  # See https://docs.travis-ci.com/user/deployment/releases/
  provider: releases
  api_key:
    secure: "HN3nvPJcvhfLj9pH8IXzZWcfncq8E1NWwMXB+wASdVO+UwrOQrsIGxcYSHssMDnpt+le1/Tc5O+qi6XD7TtYHUY6pzaAEdygJ8SvJGxXGKtWyi00VW9j54vwNR5imfdn9/uRJnZ++TG7oJI406EYktsrOgo7cqSzuPGWm0M18S7UIQhMbZf1/exd9Vk9fs79EksiPHGqmf3n/MZFCOw0NhUSjWO/R1kYeFui2oDtrDFZb78sGkAwIY/dXJ4lU3d07M7wth+5tTB3vmGTwGoBbw6sF3FcErp4U/FsfZqF5LsDNSl6uVv50cPufkhnHstDB6/5tWWSjBIa+VkXVfvG37hupw5DDbXnthekTQeNCHfZm22rchwGdoZvkY02j0wSqcI/TCDMs/ViDPZTaaEPAb7GPgAeYfI3gE5OvRCfwtFUz9wA7X29FBHp+ZNNtrSek7Nt5lWe3NKdc8yT5hUspzkJwxu1hpsrN8Zb87ABkZCPyt7ij1/T99sqQma0ftguaD7f2Ehk7KqBNlb6VesmXurOenaGrT2kYML+Y1HK39MvsGsPryM5XrnOlUEYwkpQrERrG1kXDqx/hM+CTQkNWuKoo0j8ASVA+7PqPCdtfl+NXgtfRIDO8/4j3Mb48b5f72DL1qGL1mz5o7sLSlK+ETeuHNiZumhSMbb5d1vgI2s="
  file_glob: true # enables wildcards in file names
  file: "releases/*.tar.gz"
  skip_cleanup: true
  on:
    tags: true
