# Builds the docker-machine-driver-kamatera and releases it, if the build is a tag
# (due to the deploy.on.tags=true below).
#
# To make it work, create and encrypt an OAuth token for the Github API as follows:
# (1) Go to https://github.com/settings/tokens and create a new private token
#     with scope "public_repo".
# (2) Convert the token into a Travis secret as described at
#     https://docs.travis-ci.com/user/encryption-keys/:
#     * (assuming you are on a shell with the current working directory being
#       inside a local working copy of your Github project)
#     * gem install travis
#     * travis encypt <the token created in step (1)>
#     * add the secure: "<encrypted token>" to the travis.yml file as a key
#       below the api_key
language: go
go:
  - stable

services:
  - docker

before_install:
  # Install Go Dep
  - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

install:
  - dep ensure
  - go build -o docker-machine-driver-kamatera
  - chmod +x docker-machine-driver-kamatera
  - sudo cp docker-machine-driver-kamatera /usr/local/bin/docker-machine-driver-kamatera
  - curl -L https://github.com/docker/machine/releases/download/v0.16.0/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine
  - sudo install /tmp/docker-machine /usr/local/bin/docker-machine

script:
  - cp -f `which docker-machine-driver-kamatera` tests/
  - docker build -t tests tests/
  - docker run -it -e TESTS_DEBUG=1 -e KAMATERA_API_CLIENT_ID -e KAMATERA_API_SECRET tests
  - |
    docker run -it -v /var/run/docker.sock:/var/run/docker.sock \
                   -v "`pwd`/test_results/kamatera-suite-1/:/test_results/" \
                   -e KAMATERA_API_CLIENT_ID -e KAMATERA_API_SECRET \
                   -e "KAMATERA_HOST_PATH=`pwd`/test_results/kamatera-suite-1" \
                   -e SUITE_RUN_TITLE=kamatera-suite-1 tests tests_suite.py

before_deploy:
  # Create binaries for many OSs and architures as tarballs.
  # the -osarch="!a/b !c/d" option is used to exclude OS-arch pairs
  # a/b and c/d from the build. OS-arch pairs might e.g. be excluded
  # they failed to build.
  - go get github.com/mitchellh/gox
  - mkdir releases
  - gox -osarch='!netbsd/arm !openbsd/386 !openbsd/amd64 !netbsd/386 !netbsd/amd64' -output="releases/{{.Dir}}_`git describe --tags --abbrev=0`_{{.OS}}_{{.Arch}}/{{.Dir}}" -ldflags "-X main.Version=`git describe --tags --abbrev=0`"
  # Loop through the built architecture directories and create their corresponding tar.gz archives with the binary in it.
  - find releases -maxdepth 2 -mindepth 2 -type f -exec bash -c 'tar -cvzf "$(dirname {}).tar.gz" -C "$(dirname {})" $(basename {})' \;

deploy:
  # See https://docs.travis-ci.com/user/deployment/releases/
  provider: releases
  api_key:
    secure: "HN3nvPJcvhfLj9pH8IXzZWcfncq8E1NWwMXB+wASdVO+UwrOQrsIGxcYSHssMDnpt+le1/Tc5O+qi6XD7TtYHUY6pzaAEdygJ8SvJGxXGKtWyi00VW9j54vwNR5imfdn9/uRJnZ++TG7oJI406EYktsrOgo7cqSzuPGWm0M18S7UIQhMbZf1/exd9Vk9fs79EksiPHGqmf3n/MZFCOw0NhUSjWO/R1kYeFui2oDtrDFZb78sGkAwIY/dXJ4lU3d07M7wth+5tTB3vmGTwGoBbw6sF3FcErp4U/FsfZqF5LsDNSl6uVv50cPufkhnHstDB6/5tWWSjBIa+VkXVfvG37hupw5DDbXnthekTQeNCHfZm22rchwGdoZvkY02j0wSqcI/TCDMs/ViDPZTaaEPAb7GPgAeYfI3gE5OvRCfwtFUz9wA7X29FBHp+ZNNtrSek7Nt5lWe3NKdc8yT5hUspzkJwxu1hpsrN8Zb87ABkZCPyt7ij1/T99sqQma0ftguaD7f2Ehk7KqBNlb6VesmXurOenaGrT2kYML+Y1HK39MvsGsPryM5XrnOlUEYwkpQrERrG1kXDqx/hM+CTQkNWuKoo0j8ASVA+7PqPCdtfl+NXgtfRIDO8/4j3Mb48b5f72DL1qGL1mz5o7sLSlK+ETeuHNiZumhSMbb5d1vgI2s="
  file_glob: true # enables wildcards in file names
  file: "releases/*.tar.gz"
  skip_cleanup: true
  on:
    tags: true
