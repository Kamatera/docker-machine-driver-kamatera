name: CI
on:
  push:
jobs:
#  test:
#    runs-on: ubuntu-18.04
#    steps:
#    - uses: actions/checkout@v2
#    - env:
#        DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
#        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
#        KAMATERA_API_CLIENT_ID: ${{ secrets.KAMATERA_API_CLIENT_ID }}
#        KAMATERA_API_SECRET: ${{ secrets.KAMATERA_API_SECRET }}
#      run: |
#        curl -L https://github.com/docker/machine/releases/download/v0.16.0/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&\
#        sudo install /tmp/docker-machine /usr/local/bin/docker-machine &&\
#        echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_USER}" --password-stdin &&\
#        go build -o tests/docker-machine-driver-kamatera &&\
#        chmod +x tests/docker-machine-driver-kamatera &&\
#        ( docker pull kamatera/kamatera-docker-machine-driver-tests || true ) &&\
#        docker build --cache-from kamatera/kamatera-docker-machine-driver-tests -t tests tests/ &&\
#        docker run -t \
#                   -v /var/run/docker.sock:/var/run/docker.sock \
#                   -v "`pwd`/test_results/kamatera-suite-1/:/test_results/" \
#                   -e KAMATERA_API_CLIENT_ID -e KAMATERA_API_SECRET \
#                   -e "KAMATERA_HOST_PATH=`pwd`/test_results/kamatera-suite-1" \
#                   -e SUITE_RUN_TITLE=kamatera-suite-1 \
#                   -e NUM_SINGLE_MACHINE_TESTS_TO_RUN=5 \
#                   -e TEST_ACCOUNT=NOLIMIT \
#                   tests tests_suite.py &&\
#        chown -R $USER test_results/ tests/ &&\
#        docker tag tests kamatera/kamatera-docker-machine-driver-tests &&\
#        docker push kamatera/kamatera-docker-machine-driver-tests &&\
#        docker run -t -e KAMATERA_API_CLIENT_ID -e KAMATERA_API_SECRET tests cleanup.py "ktm-"
#    - uses: actions/upload-artifact@v1
#      if: always()
#      with:
#        name: tests
#        path: tests
#    - uses: actions/upload-artifact@v1
#      if: always()
#      with:
#        name: test_results
#        path: test_results
  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION="$(echo $GITHUB_REF | sed -e 's:refs/tags/::')"
          else
            VERSION=0.0.0
          fi &&\
          echo VERSION=$VERSION &&\
          go get github.com/mitchellh/gox &&\
          mkdir releases &&\
          $HOME/go/bin/gox -osarch='!netbsd/arm !openbsd/386 !openbsd/amd64 !netbsd/386 !netbsd/amd64' \
              -output="releases/{{.Dir}}_${VERSION}_{{.OS}}_{{.Arch}}/{{.Dir}}" \
              -ldflags "-X main.Version=${VERSION}" &&\
          find releases -maxdepth 2 -mindepth 2 -type f -exec bash -c 'tar -cvzf "$(dirname {}).tar.gz" -C "$(dirname {})" $(basename {})' \;
      - uses: actions/upload-artifact@v1
        if: always()
        with:
          name: releases
          path: releases
